pico-8 cartridge // http://www.pico-8.com
version 32
__lua__
function cons(e, l)
  return {e, l}
end
function isempty(l)
  if l == nil then
    return true
  elseif type(l) == "table" then
    return false
  else
    assert(false, type(l))
  end
end
assert(isempty(nil) == true)
assert(
  isempty(cons(1, nil))
  == false)
assert(
  isempty(cons(nil, nil))
  == false)
function first(l)
  if isempty(l) then
    return nil
  else
    return l[1]
  end
end
assert(first(nil) == nil)
assert(first(cons(1, nil)) == 1)
function rest(l)
  if isempty(l) then
    return nil
  else
    return l[2]
  end
end
assert(rest(cons(1,nil))==nil)
assert(
  first(
    rest(
      cons(1,
        cons(2, nil)))) == 2)
        
prelude = {}
function def(n, f, env)
  if env == nil then
    env = prelude
  end
  env[n] = f
  return env
end
function getval(name, env)
  assert(name ~= nil)
  assert(type(name)=="string")
  local v = env[name]
  if v == nil then
    assert(false,
     "unbound "..name)
  end
  return v
end
def("def", def)
def("cons", cons)
def("first", first)
def("$t", true)
def("empty?", isempty)
assert(getval("$t", prelude)
 == true)
function defzip(
 binds, vals, env)
  assert(env ~= nil)
  if binds == nil then
    return env
  else
    def(
     first(binds), 
     first(vals),
     env)
    return defzip(
     rest(binds),
     rest(vals),
     env)
   end
end
assert(
 defzip(
  cons("a"),
  cons("b"),
  {})["a"]
   == "b")
function second(l)
  return first(rest(l))
end
assert(second(nil) == nil)
assert(second(
  cons(1, nil)) == nil)  
assert(second(
  cons(1, cons(2, nil))) == 2)
assert(second(
  cons(1, cons(2, cons(3, nil))))
  == 2)
def("second", second)
def("rest", rest)
function third(l)
  return first(rest(rest(l)))
end
def("third", third)
function str2cons(str)
  local t = split(str, "", false)
  local l = nil
  for i=count(t),1,-1 do
    l = cons(t[i], l)
  end
  return l
end
function cons2str(l,s)
  if isempty(l) then
    return s
  else
    local p = s .. first(l)
    local r = rest(l)
    return cons2str(r, p)
  end
end
assert(
  cons2str(
    str2cons("abc"),
  "zzz")
  == "zzzabc")
def("str2cons", str2cons)
def("cons2str", cons2str)

function reverse(l)
  o = nil
  while not isempty(l) do
    o = cons(first(l), o)
    l = rest(l)
  end
  return o
end 
assert(reverse(nil) == nil)
assert(
  first(
    reverse(
      cons(1,nil))) == 1)
assert(
  first(
    reverse(
      str2cons("abc")))=="c")

-->8
function add_op(a,b)
  return a+b;
end
def("+", add_op)
function eq_op(a,b)
  if a==b then
    return true
  else
    return nil
  end
end
def("=", eq_op)
function not_op(a)
  if a == nil then
    return true
  else
    return nil
  end
end
def("!", not_op)
function native(e)
  return type(e) == "function"
end
assert(native(1) == false)
assert(native(cons) == true)
def("native", native)
def("cls", cls)
function islist(e)
  if type(e) == "table" then
    return true
  elseif e == nil then
    return true
  else
    return false
  end
end
assert(islist(1) == false)
assert(islist(nil) == true)
assert(islist(cons(1,nil)) == true)
def("list?", islist)
function isnum(e)
  return type(e) == "number"
end
assert(isnum(1) == true)
assert(isnum(nil) == false)
assert(isnum("a") == false)
def("num?", isnum)
function issym(e)
  return type(e) == "string"
end
assert(issym(1) == false)
assert(issym("a") == true)
def("sym?", issym)
assert(issym(nil) == false)
assert(issym("abc") == true)
function isalpha(c)
  assert(type(c) == "string"
      or c == nil,
    type(c))
  if c == nil then
    return false
  else
    return type(c) == "string" and
      c~= "(" and
      c~= ")" and
      c~= " "
  end
end
assert(isalpha(nil) == false)
assert(isalpha("a") == true)
assert(isalpha("z") == true)
assert(isalpha("(") == false)
assert(isalpha(" ") == false)
assert(isalpha("2") == true)
assert(isalpha("+") == true)
function iswhite(c)
  if c == nil then
    return false
  else
    return c == " "
  end
end
assert(iswhite(nil) == false)
assert(iswhite("a") == false)
assert(iswhite(" ") == true)
function isbool(f)
  if type(f) == "boolean" then
    return true
  else
    return false
  end
end
-->8
function decons(l)
  local t = {}
  local i = 1
  while not isempty(l) do
    t[i] = l[1]
    l = l[2]
    i = i + 1
  end
  return t
end
assert(count(decons(nil)) == 0)
assert(count(
  decons(
    cons(1, nil))) == 1)
assert(count(
  decons(
    cons(1,
      cons(2, nil)))) == 2)
def("decons", decons)
function string(form)
  if isnum(form) then
    return tostring(form)
  elseif issym(form) then
    return form
  elseif native(form) then
    return "native"
  elseif islist(form) then
    local sep = ""
    local s = "("
    while not isempty(form) do
      s = s .. sep ..
          string(first(form))
      sep = " "
      form = rest(form)
    end
    s = s .. ")"
    return s
  elseif isbool(form) then
    if form == true then
      return "$t"
    else
      return nil
    end
  else
    assert(false, type(form))
  end
end 
assert(string(add_op) == "native")
assert(string(1) == "1")
assert(string("a") == "a")
assert(string(nil) == "()")
assert(
  string(cons(1, nil)) == "(1)")
assert(
  string(
    cons(1, 
      cons(2, nil))) == "(1 2)")


-->8
-- ((fn (a b) (+ a b)) 1 2)
--fn                 args  env
--(fn (a b) (+ a b)) (1 2) (.)
function evfn(fn, args, env)
  local binds = second(fn)
  local forms = third(fn)--rest? support more than 1 form
  assert(env ~= nil)
  local copy = ns(env)
  assert(copy ~= nil)
  local envf = defzip(
   binds, args, copy)
  assert(envf ~= nil)
  return eval(forms, envf)  
end
-- symbol (1 2)
-- native (1 2)
-- (fn (a b) (+ a b) (1 2) (.)
function apply(fn, args, env)
  local f = nil
  if issym(fn) then
    f = getval(fn, env)
    assert(fn~=nil,
     "unbound fn name: "..fn)
  else
    f = fn
  end
  if native(f) then
    local t = decons(args)
    return f(unpack(t))
  elseif first(f) == "fn" then
    assert(env ~= nil)
    return evfn(f, args, env)
  else
    assert(false,
     "not a fn "..
     string(f)..
     ":" ..
     type(f))
  end
end
assert(apply(
  add_op,
  cons(1, cons(2, nil))) == 3)
def("apply", apply)
function evlist(l, env)
  if isempty(l) then
    return nil
  else
    local fst = eval(
     first(l), env)
    local rst = evlist(
     rest(l), env)
    return cons(fst, rst)
  end
end
function evcond(f, env)
  assert(f ~= nil,
   "cond fallthrough")
  local tst = first(f)
  local thn = second(f)
  local rslt = eval(tst, env)
  if rslt ~= nil then
    return eval(thn, env)
  else
    return evcond(
     rest(
      rest(f)),
     env)
  end
end
function deflst(vs, env)
  if vs == nil then
    return env
  else
    local n = first(vs)
    local v = second(vs)
    local vf= eval(v, env)
    def(n, vf, env)
    return deflst(
     rest(rest(vs)), env)
  end
end
function ns(env)
  local new = {}
  for k,v in pairs(env) do
    new[k] = v
  end
  return new
end
function evlet(f, env)
  local vars = first(f)
  local envf = deflst(
   vars,
   ns(env))
  --todo new env?
  return eval(second(f), envf)
end
function eval(form, env)
  if islist(form) then
    local fst = first(form)
    local rst = rest(form)
    if fst == nil then
      return nil
    elseif fst == "quote" then
      return rst
    elseif fst == "def" then
      return def(
       first(rst), second(rst))
    elseif fst == "cond" then
      return evcond(rst, env)
    elseif fst == "let" then
      return evlet(rst, env)
    else
      --fst (fn (a b) (+ a b))
      --rst (1 2)
      local args = evlist(rst, env)
      return apply(fst, args, env)
    end
  else
    if form == true then
      return true
    elseif isnum(form) then
      return form
    else
      return getval(form, env)
    end
  end
end
assert(eval(1) == 1)
assert(eval("+", prelude) == add_op)
assert(eval(nil) == nil)
-- (+ 1 2)
assert(
  eval(
    cons(add_op,
      cons(1,
        cons(2))))
  == 3)
-- do (+ (+ 1 2) 3)
assert(
  eval(
    cons(add_op,
      cons(cons(add_op,
             cons(1,
               cons(2, nil))),
        cons(3, nil)))) == 6)
def("eval", eval)
-->8
function takepred(p,r,l)
  local o = nil
  local c = first(l)
  while p(c) do
    o = r(o, c)
    l = rest(l)
    c = first(l)
  end
  return cons(o, cons(l))
end
function buildstr(a,c)
  if a == nil then
    a = ""
  end
  return a..c
end
assert(buildstr(nil,"a") == "a")
assert(buildstr("a","b") == "ab")
function takesym(l)
  return takepred(
      isalpha,
      buildstr,
      l)
end
assert(
  string(
    takesym(
      str2cons("")))
  == "(() ())")
assert(
  string(
    takesym(
      str2cons("abc 123")))
  == "(abc (  1 2 3))")
function buildnum(a, c)
  if a == nil then
    a = 0
  end
  return 10 * a + (c-"0")
end
function isnumchar(c)
  return type(c) == "string" and
    c >= "0" and c <= "9"
end
function takenum(l)
  return takepred(
      isnumchar,
      buildnum,
      l)
end
assert(
  string(
    takenum(
      str2cons("")))
  == "(() ())")
assert(
  string(
    takenum(
      str2cons("123 abc")))
  == "(123 (  a b c))")
function takewhite(l)
  return takepred(
      iswhite,
      buildstr,
      l)
end
assert(
  string(
    takewhite(
      str2cons("")))
  == "(() ())")
assert(
  string(
    takewhite(
      str2cons("  123")))
  == "(   (1 2 3))")
  
function isparen(c)
  if c == nil then
    return false
  else
    return c == "("
  end
end
assert(isparen(nil) == false)
assert(isparen("(") == true)
assert(isparen(")") == false)
assert(isparen(" ") == false)

function takelist(l)
  local o = nil
  local c = first(l)
  if c ~= "(" then
    return cons(nil, cons(l))
  end
  l = rest(l)
  c = first(l)
  while c ~= ")" and c ~= nil do
    -- we are inside the list
    r = read(l)
    if first(r) ~= nil then
      o = cons(first(r), o)
    else
      -- print("list skip white")
    end
    l = second(r)
    c = first(l)
  end
  assert(c == ")")
  l = rest(l)
  return cons(
    reverse(o),
    cons(l, nil))
end

function read(l)
  local c = first(l)
  --print("read")
  --print("l:"..string(l))
  --print("c:" .. c)
  local r
  local rnum = takenum(l)
  local ralpha = takesym(l)
  local rlist = takelist(l)
  local rwhite = takewhite(l)
  if first(rwhite) then
    r = cons(
      nil,
      cons(second(rwhite)))
  elseif first(rlist) then
    r = rlist
  elseif c == ")" then
    --print("read hit list end")
    r = cons(nil, cons(l))
  elseif first(rnum) then
    r = rnum
  elseif first(ralpha) then
    r = ralpha
  elseif c ~= nil then
    assert(false,
      "unexpected char `"..
      tostring(c)..
      "` context `" ..
      string(l) .. 
      "`")
  else
    assert(c==nil)
    assert(l==nil)
    r = cons(c, cons(l))
  end
  o = first(r)
  l = second(r)
  return cons(o, cons(l, nil))
end
function parse(s)
  local chars = str2cons(s)
  local forms = read(chars)
  local rem = second(forms)
  assert(rem == nil, string(rem))
  local expr = first(forms)
  return expr
end
assert(
  string(
    takelist(
      str2cons(
        "()"))) 
  == "(() ())")
assert(
  string(
    takelist(
      str2cons(
        "( )"))) 
  == "(() ())")
assert(
  string(parse(" "))
  == "()") --"(() ())")
assert(
  parse("123")
  == 123) --"(123 ())")
assert(
  parse("abc")
  == "abc") --"(abc ())")
assert(
  string(parse("(123a)"))
  == "(123 a)") --todo wrong
assert(
  string(parse("(abc1)"))
  == "(abc1)")
assert(
  string(parse("(abc)"))
  == "(abc)")
assert(
  string(read(str2cons("( abc 123 ) "))) --todo leading white
  == "((abc 123) ( ))") --todo tail white
-->8
function repl()

done = false
ins = "lispo-8 repl"
cls()
print(ins,0,0,5)
spr(1,60,16)
poke(24365,1) -- mouse+key kit
t=""
l=1
repeat
  --erase line
  grect(0,l*8,128,5)
  --print line
  print(t,0,l*8,6)
  --draw cursor
  grect(len(t)*4,l*8,3,5,8)
  flip()
  --erase cursor
  grect(len(t)*4,l*8,3,5,0)
  poke(0x5f30,1) -- disable pause
  if stat(30)==true then
    c=stat(31)
    if c>=" " and c<="z" then
      t=t..c
    elseif c=="\8" then
      t=fnd(t,c)
    elseif c!="\13" then
      cls()
      color(7)
      print("raw key:")
      print(asc(c))
      stop()
    elseif c=="\13" then
      l += 1
      print(
        string(
          eval(
            parse(t),
            prelude)),
        0, l*8, 9)
      l += 1
      t = ""
    end
  end
until done==true
end --repl()

-->8
-- functions ------------------

-- grect: draw proper rectangle
function grect(h,v,x,y,c)
  rectfill(h,v,h+x-1,v+y-1,c)
end --grect(.)
def("grect", grect)

-- return string minus last chr
function fnd(a)
  return sub(a,1,#a-1)
end--fnd(.)

-- len: return string length
function len(a)
  return #a
end -- len(.)

-- return pos # of str b in a
function instr(a,b)
local r=0
  if (a==null or a=="") return 0
  if (b==null or b=="") return 0
  for i=1,#a-#b+1 do
    if sub(a,i,i+#b-1)==b then
      r=i
      return r
    end
  end
  return 0
end --instr(.)

-- return ascii id of character
function asc(a)
  return instr(asci,a)
end --asc(.)

repl()
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__label__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000500055500550555005500000555000005550555055505000000000000000000000000000000000000000000000000000000000000000000000000000
00000000500005005000505050500000505000005050500050505000000000000000000000000000000000000000000000000000000000000000000000000000
00000000500005005550555050505550555000005500550055505000000000000000000000000000000000000000000000000000000000000000000000000000
00000000500005000050500050500000505000005050500050005000000000000000000000000000000000000000000000000000000000000000000000000000
00000000555055505500500055000000555000005050555050005550000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000006660666000000000666006008880000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000006060006066600600006000608880000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000006060066000006660006000008880000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000006060006066600600006000008880000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000006660666000000000006000008880000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

__sfx__
00011f003c0503b070390603706036060350603406032060300502f0502d0502b040290502705025060240602306021060200601d0601c0701a07019070180701707016060150601306012060110600e0500c050
011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
